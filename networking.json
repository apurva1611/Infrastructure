{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Networking stack",
  "Metadata": {},
  "Parameters": {
    "VpcName": {
      "Description": "Choose Name for Vpc",
      "Type": "String",
      "Default": "vpc_name"
    },
    "VpcCidr": {
      "Description": "Choose Cidr for Vpc",
      "Type": "String",
      "Default": "10.23.0.0/16"
    },
    "Subnet1Cidr": {
      "Description": "Choose Cidr for Subnet1",
      "Type": "String",
      "Default": "10.23.1.0/24"
    },
    "Subnet2Cidr": {
      "Description": "Choose Cidr for Subnet1",
      "Type": "String",
      "Default": "10.23.2.0/24"
    },
    "Subnet3Cidr": {
      "Description": "Choose Cidr for Subnet3",
      "Type": "String",
      "Default": "10.23.3.0/24"
    },
    "Subnet1AZs": {
      "Description": "Choose AZ for Subnet1",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "Subnet2AZs": {
      "Description": "Choose AZ for Subnet1",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "Subnet3AZs": {
      "Description": "Choose AZ for Subnet3",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SSHKeyPair": {
      "Description": "Choose Key Name",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "WebserverInstanceType": {
      "Description": "Choose Instance Type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.nano",
        "t2.small"
      ]
    },
    "WebserverAMIID": {
      "Description": "Add AMI for webserver",
      "Type": "String"
    },
    "DBInstanceID": {
      "Default": "mydbinstance",
      "Description": "My database instance",
      "Type": "String"
  },
  "DBName": {
      "Default": "db1",
      "Description": "My database",
      "Type": "String"
  },
  "DBInstanceClass": {
      "Default": "db.m5.large",
      "Description": "DB instance class",
      "Type": "String"
  },
  "DBAllocatedStorage": {
      "Default": "50",
      "Description": "The size of the database (GiB)",
      "Type": "Number"
  },
  "DBUsername": {
      "Default": "root",
      "NoEcho": "true",
      "Description": "Username for MySQL database access",
      "Type": "String"
  },

  "DBPassword": {
      "Default": "Rajuabha25!",
      "NoEcho": "true",
      "Description": "Password MySQL database access",
      "Type": "String"
  },
  "TcpPort": {
    "Description": "Enter RDS Listening TCP Port number.",
    "Type": "Number",
    "Default": "3306"
  },
  "EC2InstanceSize": {
    "Description": "Enter size of ec2 instance.",
    "Type": "Number",
    "Default": "20"
  },
  "PublicAccessible": {
    "Description": "Choose public accessibility of Db instance",
    "Type": "String",
    "Default": "false"
  },
  "CircleCIUser": {
    "Type": "String"
  },
  "S3CodeBucket": {
    "Type": "String"
  }
  },
  "Mappings": {},
  "Conditions": {},
  "Resources": {
    "MyAppVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidr"
        },
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "VpcName"
            }
          }
        ]
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": {
          "Ref": "Subnet1AZs"
        },
        "VpcId": {
          "Ref": "MyAppVpc"
        },
        "CidrBlock": {
          "Ref": "Subnet1Cidr"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Subnet1"
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": {
          "Ref": "Subnet2AZs"
        },
        "VpcId": {
          "Ref": "MyAppVpc"
        },
        "CidrBlock": {
          "Ref": "Subnet2Cidr"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Subnet2"
          }
        ]
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": {
          "Ref": "Subnet3AZs"
        },
        "VpcId": {
          "Ref": "MyAppVpc"
        },
        "CidrBlock": {
          "Ref": "Subnet3Cidr"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Subnet3"
          }
        ]
      }
    },
    "MyAppIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyAppIGW"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "MyAppVpc"
        },
        "InternetGatewayId": {
          "Ref": "MyAppIGW"
        }
      }
    },
    "PublicSubnetRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MyAppVpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnetRT"
          }
        ]
      }
    },
    "RouteIGW": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRT"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "MyAppIGW"
        }
      }
    },
    "Subnet1RouteTableAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRT"
        }
      }
    },
    "Subnet2RouteTableAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRT"
        }
      }
    },
    "Subnet3RouteTableAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRT"
        }
      }
    },
    "WebApplicationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "application",
        "GroupDescription": "SG created for web servers",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
                "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
                "Ref": "SSHLocation"
            }
          },
          {
              "IpProtocol": "tcp",
              "FromPort": "443",
              "ToPort": "443",
              "CidrIp": {
                  "Ref": "SSHLocation"
              }
          },
          {
              "IpProtocol": "tcp",
              "FromPort": "3306",
              "ToPort": "3306",
              "CidrIp": {
                  "Ref": "SSHLocation"
              }
          },
          {
              "IpProtocol": "tcp",
              "FromPort": "3000",
              "ToPort": "3000",
              "CidrIp": {
                  "Ref": "SSHLocation"
              }
          }
        ],
        "VpcId": {
          "Ref": "MyAppVpc"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "application"
          }
        ]
      }
    },
    "Webserver1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "BlockDeviceMappings": 
        [
          {
              "DeviceName": "/dev/sda1",
              "Ebs": 
              {
                  "VolumeSize": {
                    "Ref": "EC2InstanceSize"
                  },
                  "VolumeType": "gp2"
              }
          }
        ],
        "KeyName": {
          "Ref": "SSHKeyPair"
        },
        "ImageId": {
          "Ref": "WebserverAMIID"
        },
        "InstanceType": {
          "Ref": "WebserverInstanceType"
        },
        "NetworkInterfaces": [
          {
              "GroupSet": [
                  {
                      "Ref": "WebApplicationSecurityGroup"
                  }
              ],
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "DeleteOnTermination": "true",
              "SubnetId": {
                  "Ref": "Subnet1"
              }
          }
      ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Webserver1"
          }
        ],
        "IamInstanceProfile": 
        {
          "Ref": "RootInstanceProfile"
        },
        "UserData": 
        {
          "Fn::Base64": 
          {
            "Fn::Join": 
            [
              "\n",
              [  {
                "Fn::Join": 
                [
                    "",
                    [
                      "#!/bin/bash \n"
                    ]
                ]
              },
                {
                  "Fn::Join": 
                  [
                      "",
                      [
                          "echo DB_HOST=",
                          {
                              "Fn::GetAtt": [
                                  "MyDB",
                                  "Endpoint.Address"
                              ]
                          },
                          " >> /etc/environment \n"
                      ]
                  ]
                },
                {
                  "Fn::Join": 
                  [
                      "",
                      [
                          "echo DB_NAME=",
                          {"Ref" :"DBName"},
                          " >> /etc/environment \n"
                      ]
                  ]
                },
                {
                  "Fn::Join": 
                  [
                      "",
                      [
                          "echo DB_USER=",
                          {"Ref" :"DBUsername"},
                          " >> /etc/environment \n"
                      ]
                  ]
                },
              {
                "Fn::Join": 
                [
                    "",
                    [
                        "echo DB_PASS=",
                        {"Ref" :"DBPassword"},
                        " >> /etc/environment \n"
                    ]
                ]
              },
              {
                "Fn::Join": 
                [
                    "",
                    [
                        "echo  s3_bucket_arn=",
                        {"Fn::GetAtt" : [ "S3Bucket" , "Arn" ]},
                        " >> /etc/profile \n"
                    ]
                ]
              },
              {
                "Fn::Join": 
                [
                    "",
                    [
                        "echo s3_bucket_name=",
                        {"Ref" :"S3Bucket"},
                        " >> /etc/environment \n"
                    ]
                ]
              }
            ]
          ]
        }
      }
    },
      "DependsOn": ["WebApplicationSecurityGroup","MyDB"]
    },
    "AccessSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
          "SecurityGroupIngress" : {         
              "FromPort" : "3306",
              "IpProtocol" : "tcp",
              "ToPort" : "3306",
              "SourceSecurityGroupId" : {
                  "Fn::GetAtt" : [
                      "WebApplicationSecurityGroup", "GroupId"
                  ]
              }
          },
          "VpcId" : {
              "Ref": "MyAppVpc"
          },
          "GroupDescription" : "String"
        }
  },
  "RDSInstanceSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
          "DBSubnetGroupDescription" : "String",
          "DBSubnetGroupName" : "String",
          "SubnetIds" : [{
              "Ref": "Subnet1"
          },
          {
              "Ref": "Subnet2"
          },
          {
              "Ref": "Subnet3"
          }]
      }
  },
  "MyDB": {
    "Type": "AWS::RDS::DBInstance",
    "Properties": {
        "DBInstanceIdentifier": {
            "Ref": "DBInstanceID"
        },
        "DBName": {
            "Ref": "DBName"
        },
        "DBInstanceClass": {
            "Ref": "DBInstanceClass"
        },
        "AllocatedStorage": {
            "Ref": "DBAllocatedStorage"
        },
        "Engine": "MySQL",
        "EngineVersion": "8.0.16",
        "MasterUsername": {
            "Ref": "DBUsername"
        },
        "MasterUserPassword": {
            "Ref": "DBPassword"
        },
        "PubliclyAccessible" : {"Ref":"PublicAccessible"},
        "Port": {
            "Ref": "TcpPort"
        },
        "DBSubnetGroupName":{
            "Ref": "RDSInstanceSubnetGroup"
        },
        "VPCSecurityGroups" : [{
          "Fn::GetAtt" : [
            "AccessSecurityGroup", "GroupId"
        ]
      }]
    }
  },
  "S3Bucket": {
    "Type": "AWS::S3::Bucket",
    "Properties": {
      "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
              {
                  "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                  }
              }
          ]
      },
      "LifecycleConfiguration" : {
        "Rules" : [{
          "Status" : "Enabled",
          "Transitions" : [
            {
            "StorageClass" : "STANDARD_IA",
            "TransitionInDays" :30
            }
          ]
        }  ]
      }
    }
  },
  "RootRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
        "RoleName": "EC2-CSYE6225",
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [
                            "ec2.amazonaws.com"
                        ]
                    },
                    "Action": [
                        "sts:AssumeRole"
                    ]
                }
            ]
        },
        "Path": "/",
        "Policies": [
            {
                "PolicyName": "WebAppS3",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:ListBucket",
                                "s3:DeleteObject",
                                "s3:PutObject",
                                "s3:PutObjectAcl"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            ""
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }
        ]
    }
},
"RootInstanceProfile": {
    "Type": "AWS::IAM::InstanceProfile",
    "Properties": {
        "Path": "/",
        "Roles": [
            {
              "Ref": "CodeDeployEC2ServiceRole"
            }
        ]
    }
},
"CircleCIUploadToS3": {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
      "ManagedPolicyName": "CircleCI-Upload-To-S3",
      "Description": "Upload to S3",
      "Path": "/",
      "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Action":  [
                    "s3:PutObject",
                    "s3:Get*",
                    "s3:List*"
                ],
                  "Resource": {
                      "Fn::Join": [
                          "",
                          [
                              "arn:aws:s3:::",
                              {
                                  "Ref": "S3CodeBucket"
                              },
                              "/*"
                          ]
                      ]
                  }
              }
          ]
      },
      "Users": [
          {
              "Ref": "CircleCIUser"
          }
      ]
  }
},
"CirlceCICodeDeploy": {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
      "ManagedPolicyName": "CirlceCI-Code-Deploy",
      "Description": "CodeDeploy to deploy to EC2",
      "Path": "/",
      "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                      "codedeploy:RegisterApplicationRevision",
                      "codedeploy:GetApplicationRevision"
                  ],
                  "Resource": [
                      "arn:aws:codedeploy:us-east-1:296298822745:application:csye6225-webapp"
                  ]
              },
              {
                  "Effect": "Allow",
                  "Action": [
                      "codedeploy:CreateDeployment",
                      "codedeploy:GetDeployment"
                  ],
                  "Resource": [
                      "*"
                  ]
              },
              {
                  "Effect": "Allow",
                  "Action": [
                      "codedeploy:GetDeploymentConfig"
                  ],
                  "Resource": [
                      "arn:aws:codedeploy:us-east-1:296298822745:deploymentconfig:CodeDeployDefault.OneAtATime",
                      "arn:aws:codedeploy:us-east-1:296298822745:deploymentconfig:CodeDeployDefault.HalfAtATime",
                      "arn:aws:codedeploy:us-east-1:296298822745:deploymentconfig:CodeDeployDefault.AllAtOnce"
                  ]
              }
          ]
      },
      "Users": [
          {
              "Ref": "CircleCIUser"
          }
      ]
  }
},
"CodeDeployEC2ServiceRole": {
  "Type": "AWS::IAM::Role",
  "Properties": {
      "RoleName": "CodeDeployEC2ServiceRole",
      "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Principal": {
                      "Service": [
                          "ec2.amazonaws.com"
                      ]
                  },
                  "Action": [
                      "sts:AssumeRole"
                  ]
              }
          ]
      },
      "Path": "/",
      "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      ]
  }
},
"CodeDeployEC2S3": {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
      "Description": "This policy allows EC2 instances to get data from S3 buckets. This is required for EC2 instances to download latest application revision.",
      "Path": "/",
      "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                      "s3:PutObject",
                      "s3:DeleteObject",
                      "s3:GetObject",
                      "s3:PutObjectAcl"
                  ],
                  "Resource": [
                      {
                          "Fn::Join": [
                              "",
                              [
                                  "arn:aws:s3:::",
                                  {
                                      "Ref": "S3Bucket"
                                  },
                                  "/*"
                              ]
                          ]
                      }
                  ]
              },
              {
                  "Effect": "Allow",
                  "Action": [
                      "s3:Get*",
                      "s3:List*"
                  ],
                  "Resource": [
                      {
                          "Fn::Join": [
                              "",
                              [
                                  "arn:aws:s3:::",
                                  {
                                      "Ref": "S3CodeBucket"
                                  },
                                  "/*"
                              ]
                          ]
                      }
                  ]
              }
          ]
      },
      "Roles": [
          {
              "Ref": "CodeDeployEC2ServiceRole"
          }
      ],
      "ManagedPolicyName": "CodeDeployEC2S3"
  },
  "DependsOn": "CodeDeployEC2ServiceRole"
}
},
"Outputs": {}
}
